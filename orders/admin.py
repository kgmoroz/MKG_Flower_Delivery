from django.contrib import admin
from .models import Order, OrderItem
from bot.utils import send_order_status_update


# ---------- –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞ –ø—Ä—è–º–æ –≤ —Ñ–æ—Ä–º–µ ------------------------------------
class OrderItemInline(admin.TabularInline):
    model = OrderItem
    fields = ('product', 'quantity', 'price')
    readonly_fields = ('product', 'quantity', 'price')
    extra = 0
    can_delete = False


# ---------- —Å–∞–º –∑–∞–∫–∞–∑ --------------------------------------------------------
@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
    # –ß—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Å–ø–∏—Å–∫–µ
    list_display = (
        "id", "user", "created_at",
        "delivery_date", "status", "total_amount",
    )
    list_filter = ("status", "delivery_date")
    search_fields = ("id", "user__username", "user__email")
    date_hierarchy = "created_at"
    readonly_fields = ("created_at",)          # –∑–∞–ø—Ä–µ—Ç–∏–º –ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é

    inlines = [OrderItemInline]

    # ---- –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞—Ç—É—Å–∞ ----
    actions = ["mark_processing", "mark_delivering", "mark_completed"]

    @admin.action(description="‚Ü™Ô∏è –ü–æ–º–µ—Ç–∏—Ç—å ¬´–í —Ä–∞–±–æ—Ç–µ¬ª")
    def mark_processing(self, request, queryset):
        self._bulk_update_status(queryset, "PROCESSING")

    @admin.action(description="üöö –ü–æ–º–µ—Ç–∏—Ç—å ¬´–í –¥–æ—Å—Ç–∞–≤–∫–µ¬ª")
    def mark_delivering(self, request, queryset):
        self._bulk_update_status(queryset, "DELIVERING")

    @admin.action(description="‚úÖ –ü–æ–º–µ—Ç–∏—Ç—å ¬´–í—ã–ø–æ–ª–Ω–µ–Ω¬ª")
    def mark_completed(self, request, queryset):
        self._bulk_update_status(queryset, "COMPLETED")

    # --- –∫–æ–ª–æ–Ω–∫–∞ ¬´–°—É–º–º–∞¬ª ---
    @admin.display(description="–°—É–º–º–∞")
    def total_amount(self, obj):
        return sum(i.quantity * i.price for i in obj.items.all())

    # --- —Å–ª—É–∂–µ–±–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è bulk-actions ---
    def _bulk_update_status(self, queryset, new_status):
        for order in queryset:
            if order.status != new_status:
                order.status = new_status
                order.save()                   # —Ç—Ä–∏–≥–≥–µ—Ä–∏—Ç save_model()
                send_order_status_update(order)

    # --- –µ–¥–∏–Ω–∏—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É ---
    def save_model(self, request, obj, form, change):
        # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∞
        old_status = None
        if change:
            old_status = Order.objects.get(pk=obj.pk).status

        super().save_model(request, obj, form, change)

        # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –≤—Ä—É—á–Ω—É—é ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if change and old_status != obj.status:
            send_order_status_update(obj)
